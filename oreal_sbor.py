

async def start_inlain_sbor_lvl_5(message):
    from main import bot
    from aiogram import types
    kp = types.InlineKeyboardMarkup()

    # btn1 = types.InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω', callback_data='start_inlain_sbor_btn1')
    btn2 = types.InlineKeyboardButton(text='–û—Ç—á—ë—Ç—ã –∑–∞ –≤—á–µ—Ä–∞', callback_data='start_inlain_sbor_btn2')
    btn3 = types.InlineKeyboardButton(text='–û—Ç—á—ë—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='start_inlain_sbor_btn3')

    # kp.add(btn1)
    kp.add(btn2)
    kp.add(btn3)

    await bot.send_message(message.from_user.id, '–û—Ç—á—ë—Ç—ã —Å–±–æ—Ä–æ—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞', reply_markup=kp)


async def start_button_sbor_lvl_1(message):
    from main import bot
    from connect_to_DB_p3 import select_first_and_seconds_name
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

    second_first_name = await select_first_and_seconds_name(message.from_user.id)
    button_start_lvl_1 = KeyboardButton('–ú–µ–Ω—é')
    kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button_start_lvl_1)

    await bot.send_message(message.chat.id, f'{second_first_name} üëã', reply_markup=kb)


async def today_inlain_report_sbor(user_fio, report_today_date, report_yesterday_date):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á—ë—Ç –∑–∞: –°–ï–ì–û–î–ù–Ø –∏–ª–∏ –í–ß–ï–†–ê
    –ï—Å–ª–∏ –æ—Ç—á—ë—Ç–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None
    :param user_fio: –§–∞–º–∏–ª–∏—è –ò–º—è
    :param report_today_date: –°–µ–≥–æ–¥–Ω—è
    :param report_yesterday_date: –í—á–µ—Ä–∞
    :return: str –∏–ª–∏ None
    """
    from aiogram.utils.exceptions import MessageTextIsEmpty
    from connect_to_DB_p3 import check_report_yesterday_or_today_sbor
    try:  # —Å–±–æ—Ä–æ—á–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ –°–ï–ì–û–î–ù–Ø
        today_report_func_sbor = await check_report_yesterday_or_today_sbor(report_today_date, user_fio)
        # –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç—á—ë—Ç–∞ - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ MessageTextIsEmpty
        if today_report_func_sbor == '':
            raise MessageTextIsEmpty("Message text is empty")
        return today_report_func_sbor
    # –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–µ—Ç
    except MessageTextIsEmpty:
        yesterday_report_func_sbor = await check_report_yesterday_or_today_sbor(report_yesterday_date, user_fio)
        # –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç—á—ë—Ç–∞ - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç–æ return None
        if yesterday_report_func_sbor == '':
            return None
        return yesterday_report_func_sbor


# –∏–Ω–ª–∞–π–Ω –≥—Ä–∞—Ñ–∏–∫
async def calendar_lvl_1(message):
    from main import bot
    from telegram_bot_calendar import WMonthTelegramCalendar, LSTEP
    # LSTEP = {'y': '–≥–æ–¥', 'm': '–º–µ—Å—è—Ü', 'd': '–¥–µ–Ω—å'}
    calendar, step = WMonthTelegramCalendar(locale='ru').build()
    await bot.send_message(message.chat.id,
                           f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}:",
                           reply_markup=calendar)
