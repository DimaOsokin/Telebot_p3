import my_logers


async def calendar(message, user_lvl, now_month=False, next_month=False, recursion=False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω, –≥–¥–µ —É –Ω–µ–≥–æ —Å—Ç–æ—è—Ç —Å–º–µ–Ω—ã
    –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –≥—Ä–∞—Ñ–∏–∫–µ, pass
    –ï—Å–ª–∏ –ø—É—Å—Ç—ã–µ —Å–º–µ–Ω—ã, "–ì—Ä–∞—Ñ–∏–∫ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"
    """

    from connect_to_DB_p3 import check_fio
    import calendar_sbor
    import calendar_auto
    import datetime

    # –≥–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∞ '1970'
    now_year = int(datetime.datetime.now().strftime('%Y'))

    # int_to_list_month([[—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü][—Å–ª–µ–¥ –º–µ—Å—è—Ü]],[[—Ç–µ–∫—É—â–∏–π –≥–æ–¥][—Å–ª–µ–¥ –≥–æ–¥]]) —Å–ª–µ–¥ –≥–æ–¥ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ +1, –µ—Å–ª–∏ —Ç–µ–∫ –º–µ—Å—è—Ü –î–µ–∫–∞–±—Ä—å
    int_to_list_month = await identify_month(now_year)
    next_year = int_to_list_month[1][0]
    # –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
    fio = await check_fio(message.from_user.id)
# –°–ë–û–†–û–ß–ù–´–ô –£–ß–ê–°–¢–û–ö
    if user_lvl == '1' or recursion is True:
        if now_month is True:
            try:  # —ç—Ç–æ—Ç –º–µ—Å—è—Ü
                now_month_work_dates_string_sbor = await calendar_sbor.calendar_sbor_string(int_to_list_month[0][0], fio, now_year)
                return f"–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–±–æ—Ä–æ—á–Ω–æ–º —É—á–∞—Å—Ç–∫–µ –Ω–∞ {int_to_list_month[0][0]}:\n" + now_month_work_dates_string_sbor
            except Exception as err:
                return f"–ù–∞ —Å–±–æ—Ä–æ—á–Ω–æ–º —É—á–∞—Å—Ç–∫–µ –Ω–∞ {int_to_list_month[0][0]} –≥—Ä–∞—Ñ–∏–∫ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"

        elif next_month is True:
            try:  # —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                next_month_work_dates_string_sbor = await calendar_sbor.calendar_sbor_string(int_to_list_month[0][1], fio, next_year)
                if next_month_work_dates_string_sbor != '':
                    return f"–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–±–æ—Ä–æ—á–Ω–æ–º —É—á–∞—Å—Ç–∫–µ –Ω–∞ {int_to_list_month[0][1]}:\n" + next_month_work_dates_string_sbor
                else:
                    return f'–ù–∞ {int_to_list_month[0][1]} –≥—Ä–∞—Ñ–∏–∫ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤'
            except:  # —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                return f'–ù–∞ —Å–±–æ—Ä–æ—á–Ω–æ–º —É—á–∞—Å—Ç–∫–µ –Ω–∞ {int_to_list_month[0][1]} –≥—Ä–∞—Ñ–∏–∫ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤'

# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –£–ß–ê–°–¢–û–ö
    elif user_lvl == '2' or recursion is True:
        if now_month is True:
            try:  # —ç—Ç–æ—Ç –º–µ—Å—è—Ü
                now_month_work_dates_string_auto = await calendar_auto.calendar_auto_string(int_to_list_month[0][0], fio, now_year)
                return f"–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —É—á–∞—Å—Ç–∫–µ –Ω–∞ {int_to_list_month[0][0]}:\n" + now_month_work_dates_string_auto
            except:
                return f"–ù–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —É—á–∞—Å—Ç–∫–µ –Ω–∞ {int_to_list_month[0][0]} –≥—Ä–∞—Ñ–∏–∫ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"
        elif next_month is True:
            try:  # —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                next_month_work_dates_string_auto = await calendar_auto.calendar_auto_string(int_to_list_month[0][1], fio, next_year)
                if next_month_work_dates_string_auto != '':
                    return f"–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —É—á–∞—Å—Ç–∫–µ –Ω–∞ {int_to_list_month[0][1]}:\n" + next_month_work_dates_string_auto
                else:
                    return f'–ù–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —É—á–∞—Å—Ç–∫–µ –Ω–∞ {int_to_list_month[0][1]} –≥—Ä–∞—Ñ–∏–∫ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤'
            except:  # —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                return f'–ù–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —É—á–∞—Å—Ç–∫–µ –Ω–∞ {int_to_list_month[0][1]} –≥—Ä–∞—Ñ–∏–∫ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤'


async def identify_month(now_year):
    import datetime
    month_list = ['', '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    next_year = now_year

    # –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –≤ int
    date_month_now = int(datetime.datetime.now().strftime('%m'))
    # –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –ù–ï –¥–µ–∫–∞–±—Ä—å
    if date_month_now != 12:
        two_months = [date_month_now, date_month_now + 1]
    # –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –¥–µ–∫–∞–±—Ä—å
    else:
        two_months = [12, 1]
        next_year = now_year + 1

    # –º–µ—Å—è—Ü—ã –≤ –±—É–∫–≤–∞—Ö
    now_month = month_list[two_months[0]]
    next_month = month_list[two_months[1]]
    two_months_list = [now_month, next_month]
    years_list = [now_year, next_year]
    return two_months_list, years_list


async def menu_inlain_lvl_1(message, user_lvl=None):
    from main import bot
    from aiogram import types
    kp = types.InlineKeyboardMarkup()

    btn1 = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á—ë—Ç üìù', callback_data='menu_inlain_lvl_1_check_report')
    btn2 = types.InlineKeyboardButton(text='–ú–æ–π –≥—Ä–∞—Ñ–∏–∫ üóì', callback_data='menu_inlain_lvl_1_my_calendar')
    # btn3 = types.InlineKeyboardButton(text='–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∏ üí∞', callback_data='–ò–Ω–ª–∞–π–Ω –º–µ–Ω—é —É—Ä–æ–≤–µ–Ω—å 1 –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏')

    kp.add(btn1)
    kp.add(btn2)
    # kp.add(btn3)

    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:', reply_markup=kp)
