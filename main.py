import BOT_TOKEN
import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils.exceptions import MessageIsTooLong, MessageTextIsEmpty, BadRequest
from telegram_bot_calendar import WMonthTelegramCalendar, LSTEP
import calendar_all
import calendar_sbor
import calendar_auto
import my_logers
import oreal_quality
import report_email
import update_quality_table
from connect_to_DB_p3 import *
from update_daily_report import *
import oreal_sbor
import oreal_auto


bot = Bot(token=BOT_TOKEN.token)
dp = Dispatcher(bot)

user_lvl = ''


@dp.callback_query_handler(WMonthTelegramCalendar.func())
async def inline_kb_answer_callback_handler_report_email(query: types.CallbackQuery):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ callback –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    :param query: types.CallbackQuery
    :return: None
    """
    await report_email.reaction_calendar_callback_report_email(query)


@dp.callback_query_handler(lambda call: True)
@dp.message_handler(commands=['start', 'help', 'all_personal'])
@dp.message_handler(content_types='text')
async def start(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ (–∫—Ä–æ–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è) –∏ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    :param message: call, commands, content_types
    :return: None
    """
    global user_lvl
    user_lvl = check_lvl_user(message.from_user.id)
    if type(message) == types.Message:
        # –∫–æ–º–∞–Ω–¥—ã
        if message.text == '/start':
            await start_message(message)
            return
        elif message.text == '/help':
            await help_message(message)
            return
        elif message.text == '/all_personal':
            await see_all_employees(message)
            return
        else:
            # –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
            await main_menu_5_lvl(message)
            return
    elif type(message) == types.CallbackQuery:
        # –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
        await start_call_back(message)
        return


async def start_call_back(call: types.CallbackQuery):
    from datetime import datetime
    if call.data == 'start_inlain_sbor_btn1':
        await bot.send_message(call.message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üë©üèª‚Äçüíª')

    elif call.data == 'start_inlain_sbor_btn2' or call.data == 'start_inlain_sbor_btn3':
        # —É–¥–∞–ª–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        report_data_list = ''

        # –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –∑–∞ –≤—á–µ—Ä–∞ –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        if call.data == 'start_inlain_sbor_btn2':
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')
            report_data_list = check_report_yesterday_or_today_sbor(need_day=yesterday)
        elif call.data == 'start_inlain_sbor_btn3':
            today = (datetime.now() - timedelta(days=0)).strftime('%d.%m.%Y')
            report_data_list = check_report_yesterday_or_today_sbor(need_day=today)

        try:
            local_values = ''
            # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–±–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–∞–º–∏ \n\n
            for x in report_data_list:
                local_values += "".join(f"{x}\n\n")
            await bot.send_message(call.message.chat.id, local_values, parse_mode='Markdown')

        # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–Ω–∞—è
        except (MessageIsTooLong, BadRequest) as err:
            # –æ—à–∏–±–∫–∞ MessageIsTooLong –∏ BadRequest (text is too long)
            if type(err) == MessageIsTooLong or "Text is too long" in str(err):
                # —Å—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –±–æ–ª—å—à–æ–≥–æ —Å–ø–∏—Å–∫–∞
                local_values = ''
                # –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞
                for x in report_data_list:
                    # –∏–∑–º–µ—Ä–∏—Ç—å –¥–ª–∏–Ω—É local_values –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –∫–æ–Ω–∫–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    future_count_local_values = len(local_values) + len(x)
                    if future_count_local_values <= 3000:
                        local_values += "".join(f"{x}\n\n")
                    else:
                        await bot.send_message(call.message.chat.id, local_values, parse_mode='Markdown')
                        local_values = ''
                        local_values = "".join(f"{x}\n\n")
                await bot.send_message(call.message.chat.id, f"{local_values}", parse_mode='Markdown')

            elif "Text must be non-empty" in str(err):
                await bot.send_message(call.message.chat.id, text='–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å')
            else:
                # –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ BadRequest
                await bot.send_message(call.message.chat.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ BadRequest:\n{err}")

        # –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        except MessageTextIsEmpty:
            await bot.send_message(call.message.chat.id, text='–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å')
        # –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        except Exception as err:
            print('start_inlain_sbor_btn2\n', err)


    if call.data == 'start_inlain_only_auto_btn1':
        await bot.send_message(call.message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ1 üë©üèª‚Äçüíª')

    elif call.data == 'start_inlain_only_auto_btn2' or call.data == 'start_inlain_only_auto_btn3':
        # —É–¥–∞–ª–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        report_data_list = ''
        # –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –∑–∞ –≤—á–µ—Ä–∞ –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        if call.data == 'start_inlain_only_auto_btn2':
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')
            report_data_list = check_report_yesterday_or_today_auto(need_day=yesterday)
        elif call.data == 'start_inlain_only_auto_btn3':
            today = (datetime.now() - timedelta(days=0)).strftime('%d.%m.%Y')
            report_data_list = check_report_yesterday_or_today_auto(need_day=today)

        try:
            local_values = ''
            # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–±–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–∞–º–∏ \n\n
            for x in report_data_list:
                local_values += "".join(f"{x}\n\n")
            await bot.send_message(call.message.chat.id, local_values, parse_mode='Markdown')

        # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–Ω–∞—è
        except (MessageIsTooLong, BadRequest) as err:
            # –æ—à–∏–±–∫–∞ MessageIsTooLong –∏ BadRequest (text is too long)
            if type(err) == MessageIsTooLong or "Text is too long" in str(err):
                # —Å—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –±–æ–ª—å—à–æ–≥–æ —Å–ø–∏—Å–∫–∞
                local_values = ''
                # –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞
                for x in report_data_list:
                    # –∏–∑–º–µ—Ä–∏—Ç—å –¥–ª–∏–Ω—É local_values –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –∫–æ–Ω–∫–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    future_count_local_values = len(local_values) + len(x)
                    if future_count_local_values <= 3000:
                        local_values += "".join(f"{x}\n\n")
                    else:
                        await bot.send_message(call.message.chat.id, local_values, parse_mode='Markdown')
                        local_values = ''
                        local_values = "".join(f"{x}\n\n")

                await bot.send_message(call.message.chat.id, f"{local_values}", parse_mode='Markdown')
            # –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif "Text must be non-empty" in str(err):
                await bot.send_message(call.message.chat.id, text='–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å')
            else:
                # –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ BadRequest
                await bot.send_message(call.message.chat.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ BadRequest:\n{err}")

        # –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        except MessageTextIsEmpty:
            await bot.send_message(call.message.chat.id, text='–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å')
        # –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        except Exception as err:
            print('start_inlain_auto_btn2\n', err)


    if call.data == 'start_inlain_only_VRO_btn1':
        await bot.send_message(call.message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ4 üë©üèª‚Äçüíª')
    elif call.data == 'start_inlain_only_VRO_btn2' or call.data == 'start_inlain_only_VRO_btn3':
        # —É–¥–∞–ª–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        report_data_list = ''
        # –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –∑–∞ –≤—á–µ—Ä–∞ –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        if call.data == 'start_inlain_only_VRO_btn2':
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')
            report_data_list = check_report_yesterday_or_today_VRO(need_day=yesterday)
        elif call.data == 'start_inlain_only_VRO_btn3':
            today = (datetime.now() - timedelta(days=0)).strftime('%d.%m.%Y')
            report_data_list = check_report_yesterday_or_today_VRO(need_day=today)

        try:
            local_values = ''
            # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–±–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–∞–º–∏ \n\n
            for x in report_data_list:
                local_values += "".join(f"{x}\n\n")
            await bot.send_message(call.message.chat.id, local_values, parse_mode='Markdown')

        # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–Ω–∞—è
        except (MessageIsTooLong, BadRequest) as err:
            # –æ—à–∏–±–∫–∞ MessageIsTooLong –∏ BadRequest (text is too long)
            if type(err) == MessageIsTooLong or "Text is too long" in str(err):
                # —Å—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –±–æ–ª—å—à–æ–≥–æ —Å–ø–∏—Å–∫–∞
                local_values = ''
                # –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞
                for x in report_data_list:
                    # –∏–∑–º–µ—Ä–∏—Ç—å –¥–ª–∏–Ω—É local_values –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –∫–æ–Ω–∫–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    future_count_local_values = len(local_values) + len(x)
                    if future_count_local_values <= 3000:
                        local_values += "".join(f"{x}\n\n")
                    else:
                        await bot.send_message(call.message.chat.id, local_values, parse_mode='Markdown')
                        local_values = ''
                        local_values = "".join(f"{x}\n\n")

                await bot.send_message(call.message.chat.id, f"{local_values}", parse_mode='Markdown')
            # –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif "Text must be non-empty" in str(err):
                await bot.send_message(call.message.chat.id, text='–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å')
            else:
                # –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ BadRequest
                await bot.send_message(call.message.chat.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ BadRequest:\n{err}")

        # –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        except MessageTextIsEmpty:
            await bot.send_message(call.message.chat.id, text='–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å')
        # –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        except Exception as err:
            print('start_inlain_auto_btn2\n', err)


    if call.data == 'menu_inlain_lvl_1_check_report':
        # –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ò–ú–Ø –∏ –§–ê–ú–ò–õ–ò–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_fio = await check_fio(call.from_user.id)
        # –¥–∞—Ç–∞ –∑–∞ –°–ï–ì–û–î–ù–Ø –∏ –í–ß–ï–†–ê
        report_today_date = (datetime.now() - timedelta(days=0)).strftime('%d.%m.%Y')
        report_yesterday_date = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')

        # —É–¥–∞–ª–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

        # –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –æ—Ç—á—ë—Ç–∞–º–∏ (None, –µ—Å–ª–∏ –ø—É—Å—Ç–æ)
        get_today_report_inlain_btn_sbor = await oreal_sbor.today_inlain_report_sbor(user_fio, report_today_date,
                                                                                     report_yesterday_date)
        get_today_report_inlain_btn_auto = await oreal_auto.today_inlain_report_auto(user_fio, report_today_date,
                                                                                     report_yesterday_date)
        get_today_report_inlain_btn_VRO = await oreal_auto.today_inlain_report_VRO(user_fio, report_today_date,
                                                                                   report_yesterday_date)
        # –≤—Å–µ –æ—Ç—á—ë—Ç—ã None
        if (get_today_report_inlain_btn_sbor is None) \
                and (get_today_report_inlain_btn_auto is None) \
                and (get_today_report_inlain_btn_VRO is None):
            await bot.send_message(call.message.chat.id,
                                   text=' –ó–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∏ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –≤–∞—à–∏—Ö –æ—Ç—á—ë—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üôÖ‚Äç‚ôÇÔ∏è')
        else:
            if get_today_report_inlain_btn_sbor:
                await bot.send_message(call.message.chat.id,
                                       text=get_today_report_inlain_btn_sbor, parse_mode='Markdown')
            if get_today_report_inlain_btn_auto:
                await bot.send_message(call.message.chat.id,
                                       text=get_today_report_inlain_btn_auto, parse_mode='Markdown')
            if get_today_report_inlain_btn_VRO:
                await bot.send_message(call.message.chat.id,
                                       text=get_today_report_inlain_btn_VRO, parse_mode='Markdown')

    elif call.data == 'menu_inlain_lvl_1_my_calendar':
        true_id_user = call.message.chat.id
        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª–æ–≤–∞—Ä–µ call.message.from_user –Ω–∞—Ö–æ–¥–∏—Ç—Å—è id –±–æ—Ç–∞, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –∫–æ–ø–∏—Ä—É–µ—Ç id —á–∞—Ç–∞ –≤ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–∞—á–µ calendar.check_fio –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        # –∏–Ω–∞—á–µ –≤ –ë–î –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id —á–∞—Ç–∞, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        call.message['from']['id'] = true_id_user
        user_lvl = check_lvl_user(call.message.chat.id)
        await get_calendar(call.message, user_lvl)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif (call.data == '–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã –∑–∞ –≤—á–µ—Ä–∞') or (call.data == '–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è'):
        if call.data == '–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã –∑–∞ –≤—á–µ—Ä–∞':
            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            await auto_insert_reports(message=call.message, day='yesterday')
        elif call.data == '–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è':
            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            await auto_insert_reports(message=call.message, day='today')

    elif call.data == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            call.message['from']['id'] = call.message.chat.id
            await calendar_all.menu_inlain_lvl_1(call.message)

    elif call.data == '–ò–Ω–ª–∞–π–Ω –º–µ–Ω—é —É—Ä–æ–≤–µ–Ω—å 1 –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏':
        true_id_user = call.message.chat.id
        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª–æ–≤–∞—Ä–µ call.message.from_user –Ω–∞—Ö–æ–¥–∏—Ç—Å—è id –±–æ—Ç–∞, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –∫–æ–ø–∏—Ä—É–µ—Ç id —á–∞—Ç–∞ –≤ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–∞—á–µ calendar.check_fio –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        # –∏–Ω–∞—á–µ –≤ –ë–î –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id —á–∞—Ç–∞, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        call.message['from']['id'] = true_id_user
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

        kp = types.InlineKeyboardMarkup()

        btn1 = types.InlineKeyboardButton(
            text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ üìñ', callback_data='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏')
        btn2 = types.InlineKeyboardButton(
            text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –≤ –î–ï–ù–¨ üåï', callback_data='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –≤ –î–ï–ù–¨')
        btn3 = types.InlineKeyboardButton(
            text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –≤ –ù–û–ß–¨ üåë', callback_data='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –≤ –ù–û–ß–¨')
        btn4 = types.InlineKeyboardButton(
            text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨Ö', callback_data='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

        kp.add(btn1)
        kp.add(btn2)
        kp.add(btn3)
        kp.add(btn4)

        await bot.send_message(call.message.from_user.id, '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∏:', reply_markup=kp)

    elif call.data == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏':
        true_id_user = call.message.chat.id
        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª–æ–≤–∞—Ä–µ call.message.from_user –Ω–∞—Ö–æ–¥–∏—Ç—Å—è id –±–æ—Ç–∞, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –∫–æ–ø–∏—Ä—É–µ—Ç id —á–∞—Ç–∞ –≤ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–∞—á–µ calendar.check_fio –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        # –∏–Ω–∞—á–µ –≤ –ë–î –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id —á–∞—Ç–∞, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        call.message['from']['id'] = true_id_user

        user_lvl = check_lvl_user(call.message.from_user.id)
        fio = await check_fio(call.message.from_user.id)
        now_year = int(datetime.now().strftime('%Y'))
        # int_to_list_month([[—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü][—Å–ª–µ–¥ –º–µ—Å—è—Ü]],[[—Ç–µ–∫—É—â–∏–π –≥–æ–¥][—Å–ª–µ–¥ –≥–æ–¥]]) —Å–ª–µ–¥ –≥–æ–¥ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ +1, –µ—Å–ª–∏ —Ç–µ–∫ –º–µ—Å—è—Ü –î–µ–∫–∞–±—Ä—å
        int_to_list_month = await calendar_all.identify_month(now_year)
        next_year = int_to_list_month[1][0]
# –°–ë–û–†–©–ò–ö
        if user_lvl == '1':
            try:
                weekends = await calendar_sbor.calendar_sbor_string(
                    month=int_to_list_month[0][0],
                    fio=fio,
                    year=now_year,
                    weekends=True)
                await bot.send_message(call.message.from_user.id,
                                       text=f"–í–∞—à–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –Ω–∞ {int_to_list_month[0][0]}:\n{weekends}")
            except:
                pass
            try:
                weekends = await calendar_sbor.calendar_sbor_string(
                    month=int_to_list_month[0][1],
                    fio=fio,
                    year=now_year,
                    weekends=True,
                    next_month=True)
                await bot.send_message(call.message.from_user.id,
                                       text=f"–í–∞—à–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –Ω–∞ {int_to_list_month[0][1]}:\n{weekends}")
            except:
                pass
# –û–ü–ï–†–ê–¢–û–†
        else:
            try:
                weekends = await calendar_auto.calendar_auto_string(
                    month=int_to_list_month[0][0],
                    fio=fio,
                    year=now_year,
                    weekends=True)
                await bot.send_message(call.message.from_user.id,
                                       text=f"–í–∞—à–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –Ω–∞ {int_to_list_month[0][0]}:\n{weekends}")
            except:
                pass
            try:
                weekends = await calendar_auto.calendar_auto_string(
                    month=int_to_list_month[0][1],
                    fio=fio,
                    year=now_year,
                    weekends=True,
                    next_month=True)
                await bot.send_message(call.message.from_user.id,
                                       text=f"–í–∞—à–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –Ω–∞ {int_to_list_month[0][1]}:\n{weekends}")
            except:
                pass
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –≤ –î–ï–ù–¨':
        call.message['from']['id'] = call.message.chat.id
        # await bot.send_message(call.message.from_user.id, text=f"–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

        import pandas as pd
        import datetime
        now_year = int(datetime.datetime.now().strftime('%Y'))
        # int_to_list_month([[—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü][—Å–ª–µ–¥ –º–µ—Å—è—Ü]],[[—Ç–µ–∫—É—â–∏–π –≥–æ–¥][—Å–ª–µ–¥ –≥–æ–¥]]) —Å–ª–µ–¥ –≥–æ–¥ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ +1, –µ—Å–ª–∏ —Ç–µ–∫ –º–µ—Å—è—Ü –î–µ–∫–∞–±—Ä—å
        int_to_list_month = await calendar_all.identify_month(now_year)
        next_year = int_to_list_month[1][0]
        fio = await check_fio(call.message.from_user.id)
        text = await calendar_sbor.calendar_sbor_string(month=int_to_list_month[0][0], fio=None, year=now_year)
        # loc = pd.DataFrame(text[])
        # print(loc)
        # await bot.send_message(call.message.from_user.id, text='text')


        # await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –≤ –ù–û–ß–¨':
        call.message['from']['id'] = call.message.chat.id
        await bot.send_message(call.message.from_user.id, text=f"–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    elif call.data == '–î–µ—Ñ–µ–∫—Ç—ã –ö–ö today' \
            or call.data == '–î–µ—Ñ–µ–∫—Ç—ã –ö–ö yesterday' \
            or call.data == '–î–µ—Ñ–µ–∫—Ç—ã –ö–ö last_week':
        # —É–¥–∞–ª–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        call.message['from']['id'] = call.message.chat.id
        message_is_beginning = await bot.send_message(call.message.from_user.id, f"‚åõ –ü—Ä–æ–∏–∑–≤–æ–∂—É –ø–æ–∏—Å–∫...")

        defect_list = []
        count_defect = 0

        if call.data == '–î–µ—Ñ–µ–∫—Ç—ã –ö–ö today':
            defect_list, count_defect = await oreal_quality.get_defect('today')
        elif call.data == '–î–µ—Ñ–µ–∫—Ç—ã –ö–ö yesterday':
            defect_list, count_defect = await oreal_quality.get_defect('yesterday')
        elif call.data == '–î–µ—Ñ–µ–∫—Ç—ã –ö–ö last_week':
            defect_list, count_defect = await oreal_quality.get_defect('last_week')

        local_values = ''

        try:
            # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
            if not defect_list:
                await bot.send_message(call.message.from_user.id,
                                       f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤: *0*", parse_mode='Markdown')
            else:
                for x in defect_list:
                    local_values += "".join(map(str, x))
                await bot.send_message(call.message.from_user.id,
                                       f"{local_values}\n\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤: *{count_defect}*", parse_mode='Markdown')
        # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–Ω–∞—è
        except (MessageIsTooLong, BadRequest)as err:
            # –æ—à–∏–±–∫–∞ MessageIsTooLong –∏ BadRequest (text is too long)
            if type(err) == MessageIsTooLong or "Text is too long" in str(err):
                local_values = ''
                # —Å—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –±–æ–ª—å—à–æ–≥–æ —Å–ø–∏—Å–∫–∞
                # –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞
                for x in defect_list:
                    # –∏–∑–º–µ—Ä–∏—Ç—å –¥–ª–∏–Ω—É local_values –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –∫–æ–Ω–∫–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    future_count_local_values = len(local_values) + len(x)
                    if future_count_local_values <= 3000:
                        local_values += "".join(map(str, x))
                    else:
                        await bot.send_message(call.message.from_user.id, local_values, parse_mode='Markdown')
                        del local_values
                        local_values = "".join(map(str, x))

                await bot.send_message(call.message.from_user.id,
                                       f"{local_values}–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤: *{count_defect}*", parse_mode='Markdown')
            else:
                # –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ BadRequest
                await bot.send_message(call.message.from_user.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ BadRequest:\n{err}")

        except MessageTextIsEmpty:
            await bot.send_message(call.message.from_user.id,
                                   '–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ –ö–ö, '
                                   '–≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë –Ω–∞ —Å–≤–æ—ë–º —Ä–∞–±–æ—á–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ')
        except Exception as err:
            await bot.send_message(call.message.from_user.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:\n{err}")
        # —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ message_is_beginning
        await bot.delete_message(chat_id=call.message.chat.id, message_id=message_is_beginning.message_id)


    elif call.data == '–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞ –≥–æ–¥':
        # —É–¥–∞–ª–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        call.message['from']['id'] = call.message.chat.id

        # –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        send_message = ''
        # —Å–ø–∏—Å–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º
        quality_indicators_list = await update_quality_table.quality_indicators()

        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
        for i in quality_indicators_list:
            send_message += "".join(i)

        await bot.send_message(call.message.from_user.id, send_message, parse_mode='Markdown')

    elif call.data == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É False':
        from report_email import calendar_message_cache
        user_id = call.message.chat.id
        kp = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—á—Ç—É ‚úÖ', callback_data='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É True')
        btn2 = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞', callback_data='–ù–∞—á–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞')
        btn3 = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='–û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞')

        kp.add(btn1)
        kp.add(btn2)
        kp.add(btn3)

        await call.message.edit_reply_markup(reply_markup=kp)
        calendar_message_cache[user_id].update({'send_to_email': True})

    elif call.data == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É True':
        from report_email import calendar_message_cache
        user_id = call.message.chat.id
        kp = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—á—Ç—É ‚ùå', callback_data='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É False')
        btn2 = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞', callback_data='–ù–∞—á–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞')
        btn3 = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='–û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞')

        kp.add(btn1)
        kp.add(btn2)
        kp.add(btn3)

        await call.message.edit_reply_markup(reply_markup=kp)
        calendar_message_cache[user_id].update({'send_to_email': False})

    elif call.data == '–û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞':
        from report_email import calendar_message_cache
        user_id = call.message.chat.id
        try:
            await bot.delete_message(chat_id=call.message.chat.id,
                                     message_id=calendar_message_cache[user_id]['id_call_message_calendar_1'])
            await bot.delete_message(chat_id=call.message.chat.id,
                                     message_id=calendar_message_cache[user_id]['id_call_message_calendar_2'])
            await bot.delete_message(chat_id=call.message.chat.id,
                                     message_id=calendar_message_cache[user_id]['id_call_message_calendar_menu'])
            await bot.send_message(call.message.chat.id, f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
        except:
            pass
        report_email.calendar_message_cache.clear()
        report_email.calendar_data_cache.clear()

    elif call.data == '–ù–∞—á–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞':
        from report_email import calendar_message_cache
        user_id = call.message.chat.id
        if calendar_message_cache[user_id]['send_to_email']:
            await report_email.send_email_True(id_user=call.message.chat.id)

        await bot.delete_message(chat_id=call.message.chat.id,
                                 message_id=calendar_message_cache[user_id]['id_call_message_calendar_1'])
        await bot.delete_message(chat_id=call.message.chat.id,
                                 message_id=calendar_message_cache[user_id]['id_call_message_calendar_2'])
        await bot.delete_message(chat_id=call.message.chat.id,
                                 message_id=calendar_message_cache[user_id]['id_call_message_calendar_menu'])

        date_range_list = await report_email.two_dates_to_list(dates=dict(report_email.calendar_data_cache[user_id]))
        await report_email.call_main_report_email(message=call.message, date_range_list=date_range_list)


async def get_calendar(message, user_lvl):
    search_is_beginning = await bot.send_message(message.chat.id, 'üìà –°—Ç—Ä–æ—é –≥—Ä–∞—Ñ–∏–∫...')

    if user_lvl == '1':
        calendar_SU_now_month = await calendar_all.calendar(message, user_lvl='1', now_month=True)
        calendar_SU_next_month = await calendar_all.calendar(message, user_lvl='1', next_month=True)
        await bot.send_message(message.chat.id, str(f"{calendar_SU_now_month}\n\n{calendar_SU_next_month}"))
    elif (user_lvl == '2') or (user_lvl == '3') or (user_lvl == '4'):
        calendar_AU_now_month = await calendar_all.calendar(message, user_lvl='2', now_month=True)
        calendar_AU_next_month = await calendar_all.calendar(message, user_lvl='2', next_month=True)
        await bot.send_message(message.chat.id, str(f"{calendar_AU_now_month}\n\n{calendar_AU_next_month}"))

        calendar_SU_now_month = await calendar_all.calendar(message, user_lvl='1', now_month=True)
        calendar_SU_next_month = await calendar_all.calendar(message, user_lvl='1', next_month=True)
        if calendar_SU_now_month[0] == '–ù':
            pass
        else:
            await bot.send_message(message.chat.id, str(f"{calendar_SU_now_month}"))
        if calendar_SU_next_month[0] == '–ù':
            pass
        else:
            await bot.send_message(message.chat.id, str(f"{calendar_SU_next_month}"))

    elif user_lvl == '5':
        import lvl_5_names
        # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –ª–∏—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –≤ str —á–∏—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
        fio = await check_fio(message.from_user.id)
        fio_list = list(fio.split(' '))
        # —Å–±–æ—Ä–æ—á–Ω—ã–π —É—á–∞—Å—Ç–æ–∫
        if (fio_list[0] == lvl_5_names.name1[0] or
                fio_list[0] == lvl_5_names.name2[0] or
                fio_list[0] == lvl_5_names.name9[0] or
                fio_list[0] == lvl_5_names.name8[0]):
            calendar_SU_now_month = await calendar_all.calendar(message, user_lvl='1', now_month=True)
            calendar_SU_next_month = await calendar_all.calendar(message, user_lvl='1', next_month=True)
            await bot.send_message(message.chat.id, str(f"{calendar_SU_now_month}\n\n{calendar_SU_next_month}"))
        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫
        elif (fio_list[0] == lvl_5_names.name4[0] or
              fio_list[0] == lvl_5_names.name5[0] or
              fio_list[0] == lvl_5_names.name6[0]):
            calendar_AU_now_month = await calendar_all.calendar(message, user_lvl='2', now_month=True)
            calendar_AU_next_month = await calendar_all.calendar(message, user_lvl='2', next_month=True)
            await bot.send_message(message.chat.id, str(f"{calendar_AU_now_month}\n\n{calendar_AU_next_month}"))
        # –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —Å—Ç. —Å–±–æ—Ä—â–∏–∫
        elif fio_list[0] == lvl_5_names.name7[0] or fio_list[0] == lvl_5_names.name3[0]:
            await bot.send_message(message.chat.id, '–í–∞—à –≥—Ä–∞—Ñ–∏–∫ 5/2')
    await bot.delete_message(chat_id=message.chat.id, message_id=search_is_beginning.message_id)


async def start_message(message):
    second_first_name = select_first_and_seconds_name(message.from_user.id)
    if second_first_name != 0:
        if user_lvl == '5':
            await bot.send_message(message.chat.id, f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {second_first_name}!")

        if user_lvl =='5':
            await start_message_5(message, user_lvl)
        elif user_lvl =='4':
            await start_message_4(message, user_lvl)
        elif user_lvl =='3':
            await start_message_3(message, user_lvl)
        elif user_lvl =='2':
            await start_message_2(message, user_lvl)
        elif user_lvl =='1':
            await start_message_1(message, user_lvl)
    else:
        await bot.send_message(message.chat.id,
                               '–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.'
                               '\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä—à–µ–º—É —Å–≤–æ–µ–≥–æ —É—á–∞—Å—Ç–∫–∞, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Å –≤ –±–∞–∑—É')


async def see_all_employees(message):
    second_first_name = select_first_and_seconds_name(message.from_user.id)
    if second_first_name != 0:
        if user_lvl == '5':
            await bot.send_message(message.chat.id, f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {second_first_name}!")

        list_people = select_all_employee()
        peoples = ''
        for row_tup in list_people:
            row_str = '    '.join(map(str, row_tup))
            peoples += f"{row_str}\n"
        await bot.send_message(message.chat.id, peoples)
    else:
        await my_logers.log_err(
            func='see_all_employees',
            path_file='see_all_employees',
            message='–ù–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n'
                    f"Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}\n"
                    f"–ò–º—è: {message.from_user.first_name}\n"
                    f"–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}\n"
                    f"Username: {message.from_user.username}\n"
                    )



async def help_message(message):
    await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")


# –∫–ª–∞–¥–æ–≤—â–∏–∫–∏
async def start_message_4(message, user_lvl):
    await oreal_sbor.start_button_sbor_lvl_1(message)
    await calendar_all.menu_inlain_lvl_1(message, user_lvl)


# –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ã
async def start_message_3(message, user_lvl):
    await oreal_auto.start_button_auto_lvl_1(message)
    await calendar_all.menu_inlain_lvl_1(message)


# –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
async def start_message_2(message, user_lvl):
    await oreal_auto.start_button_auto_lvl_1(message)
    await calendar_all.menu_inlain_lvl_1(message)


# —Å–±–æ—Ä—â–∏–∫–∏
async def start_message_1(message, user_lvl):
    await oreal_sbor.start_button_sbor_lvl_1(message)
    await calendar_all.menu_inlain_lvl_1(message, user_lvl)

 
# —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
async def start_message_5(message, user_lvl):
    kb = [
        [types.KeyboardButton(text="–°–±–æ—Ä–æ—á–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ üîå")],
        [types.KeyboardButton(text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫ ‚öôÔ∏è")],
        [types.KeyboardButton(text="–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ üïµÔ∏è‚Äç‚ôÄÔ∏èÔ∏è")],
        [types.KeyboardButton(text="–ú–æ–π –≥—Ä–∞—Ñ–∏–∫ üìÖ –∏ –æ—Ç—á—ë—Ç üìã")],
        [types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ü–æ–±–µ–¥–∏—Ç 3 üë®‚Äçüë®‚Äçüë¶‚Äçüë¶")],
        [types.KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã ‚úçÔ∏è")],
        [types.KeyboardButton(text="–°–æ—Å—Ç–∞–≤–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç")],
        # [types.KeyboardButton(text="–ü–æ—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å?", reply_markup=keyboard)


async def main_menu_5_lvl(message):
    if len(message.text) == 2:
        from rename_lvl import rename_full_lvls
        await rename_full_lvls(message)
    global user_lvl
    user_lvl = check_lvl_user(message.from_user.id)
    if user_lvl == '1':
        if message.text == '–ú–µ–Ω—é':
            await start_message_1(message, user_lvl)
        else:
            await bot.send_message(message.chat.id,
                                   f"–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã - '{message.text}'\n–ù–∞–ø–∏—à–∏—Ç–µ üëâ /start")
    elif user_lvl == '2':
        await start_message_2(message, user_lvl)
    elif user_lvl == '3':
        await start_message_3(message, user_lvl)
    elif user_lvl == '4':
        await start_message_4(message, user_lvl)
    elif user_lvl == '5':
        if message.text == '–°–±–æ—Ä–æ—á–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ üîå':
            await sbor_oreal_lvl_5(message)
        elif message.text == '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫ ‚öôÔ∏è':
            await automatic_oreal(message)
        elif message.text == '–û—Ç—á—ë—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—á–∞—Å—Ç–∫–∞':
            await oreal_auto.start_inlain_only_auto(message)
        elif message.text == '–û—Ç—á—ë—Ç—ã –í–†–û':
            await oreal_auto.start_inlain_only_VRO(message)
        elif message.text == '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ üïµÔ∏è‚Äç‚ôÄÔ∏èÔ∏è':
            await control_oreal(message)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await start_message(message)
        elif message.text == '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ü–æ–±–µ–¥–∏—Ç 3 üë®‚Äçüë®‚Äçüë¶‚Äçüë¶':
            await see_all_employees(message)
        elif message.text == '–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã ‚úçÔ∏è':
            from update_daily_report import auto_insert_reports
            await inlain_auto_insert_reports(message)
        elif message.text == '–ú–æ–π –≥—Ä–∞—Ñ–∏–∫ üìÖ –∏ –æ—Ç—á—ë—Ç üìã':
            kp = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á—ë—Ç üìù',
                                              callback_data='menu_inlain_lvl_1_check_report')
            btn2 = types.InlineKeyboardButton(text='–ú–æ–π –≥—Ä–∞—Ñ–∏–∫ üóì',
                                              callback_data='menu_inlain_lvl_1_my_calendar')

            kp.add(btn1)
            kp.add(btn2)

            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:',
                                   reply_markup=kp)
        elif message.text == '–°–æ—Å—Ç–∞–≤–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç':
            await report_email.create_calendar_for_email_report(message=message)
        elif message.text == '–ü–æ—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É':

            from cachetools import TTLCache
            colculation_norm_var = TTLCache(maxsize=50, ttl=300)

            async def calculation_norm():
                await bot.send_message(message.chat.id, colculation_norm_var)

        else:
            await bot.send_message(message.chat.id, f"–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã - '{message.text}'\n–ù–∞–∂–º–∏—Ç–µ üëâ /start")

    else:
        await bot.send_message(message.chat.id, '–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ')



async def inlain_auto_insert_reports(message):
    kp = types.InlineKeyboardMarkup()

    btn2 = types.InlineKeyboardButton(text='–í—á–µ—Ä–∞', callback_data='–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã –∑–∞ –≤—á–µ—Ä–∞')
    btn3 = types.InlineKeyboardButton(text='–°–µ–≥–æ–¥–Ω—è', callback_data='–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è')

    kp.add(btn2)
    kp.add(btn3)
    await bot.send_message(message.from_user.id, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤ –ü3:', reply_markup=kp)


async def report_yesterday(message):
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')
    yesterday_report = check_report_yesterday_or_today_sbor(yesterday)
    await bot.send_message(message.chat.id, yesterday_report, parse_mode='Markdown')


async def sbor_oreal_lvl_5(message):
    await oreal_sbor.start_inlain_sbor_lvl_5(message)


async def automatic_oreal(message):
    kb = [
        [types.KeyboardButton(text="–û—Ç—á—ë—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—á–∞—Å—Ç–∫–∞")],
        [types.KeyboardButton(text="–û—Ç—á—ë—Ç—ã –í–†–û")],
        [types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]

    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å?", reply_markup=keyboard)


async def control_oreal(message):
    kp = types.InlineKeyboardMarkup()

    btn1 = types.InlineKeyboardButton(text='–ó–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data='–î–µ—Ñ–µ–∫—Ç—ã –ö–ö today')
    btn2 = types.InlineKeyboardButton(text='–ó–∞ –≤—á–µ—Ä–∞', callback_data='–î–µ—Ñ–µ–∫—Ç—ã –ö–ö yesterday')
    btn3 = types.InlineKeyboardButton(text='–ó–∞ –Ω–µ–¥–µ–ª—é', callback_data='–î–µ—Ñ–µ–∫—Ç—ã –ö–ö last_week')
    btn4 = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞ –≥–æ–¥', callback_data='–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞ –≥–æ–¥')
    # btn5 = types.InlineKeyboardButton(text='–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è', callback_data='–î–µ—Ñ–µ–∫—Ç—ã –ö–ö all_time')

    kp.add(btn1)
    kp.add(btn2)
    kp.add(btn3)
    kp.add(btn4)
    # kp.add(btn5)

    await bot.send_message(message.from_user.id, '–°–±–æ—Ä–∫–∏ *–ë–ï–ó* –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∞:',
                           reply_markup=kp,
                           parse_mode='Markdown')








































# message.from_user.id
# message.from_user.first_name
# message.from_user.last_name
# message.from_user.username


async def main():
    await dp.start_polling(bot)
    asyncio.sleep(0.5)

if __name__ == "__main__":
    asyncio.run(main())

